{"version":3,"sources":["components/globe/Controls.ts","components/globe/Globe.ts","App.tsx","serviceWorker.ts","index.tsx","app.module.css"],"names":["Controls","domObject","drag","zoomIn","zoomOut","_this","this","Object","classCallCheck","startDragX","startDragY","mouseWheelHandler","e","preventDefault","Math","max","min","deltaY","mouseDownHandler","clientX","clientY","mouseMoveHandler","mouseUpHandler","addEventListener","Globe","container","controls","renderer","scene","camera","center","globe","clouds","initRenderer","initScene","initCamera","initCenter","lookAt","ambientLight","initAmbientLight","add","directionalLight","initDirectionalLight","createGlobe","createClouds","stars","initStarField","bind","THREE","setSize","window","innerWidth","innerHeight","appendChild","domElement","up","position","x","set","loader","rotateX","degToRad","map","load","bumpMap","bumpScale","specularMap","specular","transparent","side","deltaX","radPerPixel","PI","deltaPhi","deltaTheta","pos","sub","radius","length","theta","acos","z","phi","atan2","y","sin","cos","multiplyScalar","renderFuncs","push","delta","rotateZ","aspect","clientWidth","clientHeight","updateProjectionMatrix","render","lastTimeMsec","requestAnimationFrame","animate","nowMsec","deltaMsec","forEach","renderFunc","App","threeContainer","useRef","useEffect","current","useGlobe","react_default","a","createElement","className","style","app","appHeader","ref","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"8LAkEeA,EAjDb,SAAAA,EAAmBC,EAAwBC,EAAYC,EAAcC,GAAe,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAN,GAAAM,KAN5EG,gBAM4E,EAAAH,KAL5EI,gBAK4E,EAAAJ,KAJ5EJ,UAI4E,EAAAI,KAH5EH,YAG4E,EAAAG,KAF5EF,aAE4E,EAAAE,KAc5EK,kBAAoB,SAACC,GAC3BA,EAAEC,iBACUC,KAAKC,KAAK,EAAGD,KAAKE,IAAI,GAAIJ,EAAEK,SAE5B,GAAKZ,EAAKD,QACpBC,EAAKD,UACIC,EAAKF,QACdE,EAAKF,UArB2EG,KAyB5EY,iBAAmB,SAACN,GAC1BA,EAAEC,iBACFR,EAAKI,WAAaG,EAAEO,QACpBd,EAAKK,WAAaE,EAAEQ,SA5B8Dd,KA+B5Ee,iBAAmB,SAACT,GAC1BA,EAAEC,iBACsB,OAApBR,EAAKI,YAA2C,OAApBJ,EAAKK,aAEjCL,EAAKH,MAAMG,EAAKH,KAAKU,EAAEO,QAAUd,EAAKI,WAAYG,EAAEQ,QAAUf,EAAKK,YAEvEL,EAAKI,WAAaG,EAAEO,QACpBd,EAAKK,WAAaE,EAAEQ,UAtC8Dd,KAyC5EgB,eAAiB,SAACV,GACxBA,EAAEC,iBACFR,EAAKgB,iBAAiBT,GACtBP,EAAKI,WAAa,KAClBJ,EAAKK,WAAa,MA5ClBJ,KAAKG,WAAa,KAClBH,KAAKI,WAAa,KAClBJ,KAAKJ,KAAOA,EACZI,KAAKH,OAASA,EACdG,KAAKF,QAAUA,EAEfH,EAAUsB,iBAAiB,QAASjB,KAAKK,mBACzCV,EAAUsB,iBAAiB,QAASjB,KAAKK,mBACzCV,EAAUsB,iBAAiB,YAAajB,KAAKY,kBAC7CjB,EAAUsB,iBAAiB,YAAajB,KAAKe,kBAC7CpB,EAAUsB,iBAAiB,UAAWjB,KAAKgB,iBC4LhCE,aAhMb,SAAAA,EAAmBC,GAAyBlB,OAAAC,EAAA,EAAAD,CAAAD,KAAAkB,GAAAlB,KATpCmB,eASmC,EAAAnB,KARnCoB,cAQmC,EAAApB,KAPnCqB,cAOmC,EAAArB,KANnCsB,WAMmC,EAAAtB,KALnCuB,YAKmC,EAAAvB,KAJnCwB,YAImC,EAAAxB,KAHnCyB,WAGmC,EAAAzB,KAFnC0B,YAEmC,EACzC1B,KAAKmB,UAAYA,EACjBnB,KAAKqB,SAAWrB,KAAK2B,aAAaR,GAClCnB,KAAKsB,MAAQtB,KAAK4B,YAClB5B,KAAKuB,OAASvB,KAAK6B,aACnB7B,KAAKwB,OAASxB,KAAK8B,aACnB9B,KAAKuB,OAAOQ,OAAO/B,KAAKwB,QAExB,IAAMQ,EAAehC,KAAKiC,mBAC1BjC,KAAKsB,MAAMY,IAAIF,GAEf,IAAMG,EAAmBnC,KAAKoC,uBAC9BpC,KAAKsB,MAAMY,IAAIC,GAEfnC,KAAKyB,MAAQzB,KAAKqC,cAClBrC,KAAKsB,MAAMY,IAAIlC,KAAKyB,OAEpBzB,KAAK0B,OAAS1B,KAAKsC,eACnBtC,KAAKsB,MAAMY,IAAIlC,KAAK0B,QAEpB,IAAMa,EAAQvC,KAAKwC,gBACnBxC,KAAKsB,MAAMY,IAAIK,GAEfvC,KAAKoB,SAAW,IAAI1B,EAClByB,EACAnB,KAAKJ,KAAK6C,KAAKzC,MACfA,KAAKH,OAAO4C,KAAKzC,MACjBA,KAAKF,QAAQ2C,KAAKzC,gEAIDmB,GACnB,IAAME,EAAW,IAAIqB,IAIrB,OAHArB,EAASsB,QAAQC,OAAOC,WAAYD,OAAOE,aAC3C3B,EAAU4B,YAAY1B,EAAS2B,YAExB3B,sCAIP,OAAO,IAAIqB,yCAIX,IAAMnB,EAAS,IAAImB,IACjB,GACAE,OAAOC,WAAaD,OAAOE,YAC3B,IACA,KAMF,OAHAvB,EAAO0B,GAAK,IAAIP,IAAc,EAAG,EAAG,GACpCnB,EAAO2B,SAASC,EAAI,EAEb5B,uCAIP,OAAO,IAAImB,+CAIX,OAAO,IAAIA,IAAmB,wDAI9B,IAAMP,EAAmB,IAAIO,IAAuB,SAAU,GAE9D,OADAP,EAAiBe,SAASE,IAAI,EAAG,EAAG,GAC7BjB,wCAIP,IAAMkB,EAAS,IAAIX,IACnB,OAAO,IAAIA,IACT,IAAIA,IAAqB,GAAK,GAAI,IAAIY,QAAQZ,IAAWa,SAAS,KAClE,IAAIb,IAAwB,CAC1Bc,IAAKH,EAAOI,KA/FA,0BAgGZC,QAASL,EAAOI,KA/FL,wBAgGXE,UAAW,IACXC,YAAaP,EAAOI,KAhGT,oBAiGXI,SAAU,IAAInB,IAAY,kDAM9B,OAAO,IAAIA,IACT,IAAIA,IAAqB,KAAa,GAAI,IAAIY,QAAQZ,IAAWa,SAAS,KAC1E,IAAIb,IAAwB,CAC1Bc,KAAK,IAAId,KAAsBe,KAzGnB,0BA0GZK,aAAa,6CAMjB,OAAO,IAAIpB,IACT,IAAIA,IAAqB,GAAI,GAAI,IAAIY,QAAQZ,IAAWa,SAAS,KACjE,IAAIb,IAAwB,CAC1Bc,KAAK,IAAId,KAAsBe,KAlHpB,4BAmHXM,KAAMrB,oCAKCsB,EAAgBrD,GAC3B,IAAIsD,EAAczD,KAAK0D,GAAK,IAC1BC,EAAWF,EAAcD,EACzBI,EAAaH,EAActD,EAC3B0D,EAAMrE,KAAKuB,OAAO2B,SAASoB,IAAItE,KAAKwB,QACpC+C,EAASF,EAAIG,SACbC,EAAQjE,KAAKkE,KAAKL,EAAIM,EAAIJ,GAC1BK,EAAMpE,KAAKqE,MAAMR,EAAIS,EAAGT,EAAIlB,GAG9BsB,EAAQjE,KAAKE,IAAIF,KAAKC,IAAIgE,EAAQL,EAAY,GAAI5D,KAAK0D,IACvDU,GAAOT,EAGPE,EAAIlB,EAAIoB,EAAS/D,KAAKuE,IAAIN,GAASjE,KAAKwE,IAAIJ,GAC5CP,EAAIS,EAAIP,EAAS/D,KAAKuE,IAAIN,GAASjE,KAAKuE,IAAIH,GAC5CP,EAAIM,EAAIJ,EAAS/D,KAAKwE,IAAIP,GAE1BzE,KAAKuB,OAAO2B,SAAShB,IAAIlC,KAAKwB,QAC9BxB,KAAKuB,OAAOQ,OAAO/B,KAAKwB,yCAIpBxB,KAAKuB,OAAO2B,SAASsB,SA7IZ,IA8IXxE,KAAKuB,OAAO2B,SACToB,IAAItE,KAAKwB,QACTyD,eAAe,IACf/C,IAAIlC,KAAKwB,0CAKVxB,KAAKuB,OAAO2B,SAASsB,SArJZ,GAsJXxE,KAAKuB,OAAO2B,SACToB,IAAItE,KAAKwB,QACTyD,eAAe,KACf/C,IAAIlC,KAAKwB,yCAIM,IACZH,EAAsDrB,KAAtDqB,SAAUI,EAA4CzB,KAA5CyB,MAAOH,EAAqCtB,KAArCsB,MAAOC,EAA8BvB,KAA9BuB,OAAQG,EAAsB1B,KAAtB0B,OAAQP,EAAcnB,KAAdmB,UAC1C+D,EAA4B,GAElCA,EAAYC,KACV,SAACC,GACC3D,EAAM4D,QAAS,EAAI,GAAMD,KAI7BF,EAAYC,KACV,SAACC,GACC1D,EAAO2D,QAAS,EAAI,GAAMD,KAI9BxC,OAAO3B,iBAAiB,SAAU,WAChCM,EAAO+D,OAASnE,EAAUoE,YAAcpE,EAAUqE,aAClDjE,EAAOkE,yBACPpE,EAASsB,QAAQxB,EAAUoE,YAAapE,EAAUqE,gBAGpDN,EAAYC,KACV,WACE9D,EAASqE,OAAOpE,EAAOC,KAI3B,IAAIoE,EAA8B,KAClCC,sBAAsB,SAASC,EAAQC,GAErCH,EAAeA,GAAgBG,EAAU,IAAO,GAChD,IAAMC,EAAYvF,KAAKE,IAAI,IAAKoF,EAAUH,GAC1CA,EAAeG,EAEfZ,EAAYc,QACV,SAACC,GACCA,EAAWF,EAAY,IAAMD,EAAU,OAK3CF,sBAAsBC,cCpLbK,MAZf,WACE,IAAMC,EAhBR,WACE,IAAMA,EAAiBC,iBAAoB,MAW3C,OATAC,oBACE,WACMF,EAAeG,SACH,IAAIpF,EAAMiF,EAAeG,SACjCZ,WAKLS,EAIgBI,GAEvB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMC,KACpBL,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAME,WAAzB,gBACAN,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAMT,eAAgBY,IAAKZ,IAC5CK,EAAAC,EAAAC,cAAA,iDCbcM,QACW,cAA7BpE,OAAOqE,SAASC,UAEe,UAA7BtE,OAAOqE,SAASC,UAEhBtE,OAAOqE,SAASC,SAASC,MAAM,2DCZnCC,IAAS1B,OAAOc,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEvInBC,EAAAC,QAAA,CAAkBlB,IAAA,iBAAAC,UAAA,uBAAAX,eAAA","file":"static/js/main.a3e33df7.chunk.js","sourcesContent":["interface Drag {\n  (x: number, y: number): void;\n}\n\ninterface Zoom {\n  (): void;\n}\n\ntype Coordinate = number | null;\n\nclass Controls {\n  private startDragX: Coordinate;\n  private startDragY: Coordinate;\n  private drag: Drag;\n  private zoomIn: Zoom;\n  private zoomOut: Zoom;\n\n  public constructor(domObject: HTMLElement, drag: Drag, zoomIn: Zoom, zoomOut: Zoom) {\n    this.startDragX = null;\n    this.startDragY = null;\n    this.drag = drag;\n    this.zoomIn = zoomIn;\n    this.zoomOut = zoomOut;\n\n    domObject.addEventListener('wheel', this.mouseWheelHandler);\n    domObject.addEventListener('wheel', this.mouseWheelHandler);\n    domObject.addEventListener('mousedown', this.mouseDownHandler);\n    domObject.addEventListener('mousemove', this.mouseMoveHandler);\n    domObject.addEventListener('mouseup', this.mouseUpHandler);\n  }\n\n  private mouseWheelHandler = (e: WheelEvent): void => {\n    e.preventDefault();\n    let delta = Math.max(-1, Math.min(1, -e.deltaY));\n\n    if (delta < 0 && this.zoomOut) {\n      this.zoomOut();\n    } else if (this.zoomIn) {\n      this.zoomIn();\n    }\n  };\n\n  private mouseDownHandler = (e: MouseEvent): void => {\n    e.preventDefault();\n    this.startDragX = e.clientX;\n    this.startDragY = e.clientY;\n  };\n\n  private mouseMoveHandler = (e: MouseEvent): void => {\n    e.preventDefault();\n    if (this.startDragX === null || this.startDragY === null) return;\n\n    if (this.drag) this.drag(e.clientX - this.startDragX, e.clientY - this.startDragY);\n\n    this.startDragX = e.clientX;\n    this.startDragY = e.clientY;\n  };\n\n  private mouseUpHandler = (e: MouseEvent): void => {\n    e.preventDefault();\n    this.mouseMoveHandler(e);\n    this.startDragX = null;\n    this.startDragY = null;\n  };\n}\n\nexport default Controls;\n","import * as THREE from 'three';\nimport Controls from './Controls';\n\ntype RenderFunc = (delta: number, now: number) => void;\n\nconst EARTH_IMAGE = 'img/2_no_clouds_4k.jpg';\nconst EARTH_BUMP = 'img/elev_bump_4k.jpg';\nconst EARTH_SPEC = 'img/water_4k.png';\nconst CLOUD_IMAGE = 'img/fair_clouds_4k.png';\nconst STAR_IMAGE = 'img/galaxy_starfield.png';\n\nconst MAX_ZOOM = 0.7;\nconst MIN_ZOOM = 5;\n\nclass Globe {\n  private container: HTMLElement;\n  private controls: Controls;\n  private renderer: THREE.WebGLRenderer;\n  private scene: THREE.Scene;\n  private camera: THREE.PerspectiveCamera;\n  private center: THREE.Vector3;\n  private globe: THREE.Mesh;\n  private clouds: THREE.Mesh;\n\n  public constructor(container: HTMLElement) {\n    this.container = container;\n    this.renderer = this.initRenderer(container);\n    this.scene = this.initScene();\n    this.camera = this.initCamera();\n    this.center = this.initCenter();\n    this.camera.lookAt(this.center);\n\n    const ambientLight = this.initAmbientLight();\n    this.scene.add(ambientLight);\n\n    const directionalLight = this.initDirectionalLight();\n    this.scene.add(directionalLight);\n\n    this.globe = this.createGlobe();\n    this.scene.add(this.globe);\n\n    this.clouds = this.createClouds();\n    this.scene.add(this.clouds);\n\n    const stars = this.initStarField();\n    this.scene.add(stars);\n\n    this.controls = new Controls(\n      container,\n      this.drag.bind(this),\n      this.zoomIn.bind(this),\n      this.zoomOut.bind(this)\n    );\n  }\n\n  private initRenderer(container: HTMLElement): THREE.WebGLRenderer {\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    container.appendChild(renderer.domElement);\n\n    return renderer;\n  }\n\n  private initScene(): THREE.Scene {\n    return new THREE.Scene();\n  }\n\n  private initCamera(): THREE.PerspectiveCamera {\n    const camera = new THREE.PerspectiveCamera(\n      45,\n      window.innerWidth / window.innerHeight,\n      0.01,\n      300\n    );\n\n    camera.up = new THREE.Vector3(0, 0, 1);\n    camera.position.x = 2;\n\n    return camera;\n  }\n\n  private initCenter(): THREE.Vector3 {\n    return new THREE.Vector3();\n  }\n\n  private initAmbientLight(): THREE.Light {\n    return new THREE.AmbientLight(0x333333);\n  }\n\n  private initDirectionalLight(): THREE.Light {\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(5, 3, 5);\n    return directionalLight;\n  }\n\n  private createGlobe(): THREE.Mesh {\n    const loader = new THREE.TextureLoader();\n    return new THREE.Mesh(\n      new THREE.SphereGeometry(0.5, 32, 32).rotateX(THREE.Math.degToRad(90)),\n      new THREE.MeshPhongMaterial({\n        map: loader.load(EARTH_IMAGE),\n        bumpMap: loader.load(EARTH_BUMP),\n        bumpScale: 0.01,\n        specularMap: loader.load(EARTH_SPEC),\n        specular: new THREE.Color('grey'),\n      })\n    );\n  }\n\n  private createClouds(): THREE.Mesh {\n    return new THREE.Mesh(\n      new THREE.SphereGeometry(0.5 + 0.003, 32, 32).rotateX(THREE.Math.degToRad(90)),\n      new THREE.MeshPhongMaterial({\n        map: new THREE.TextureLoader().load(CLOUD_IMAGE),\n        transparent: true,\n      })\n    );\n  }\n\n  private initStarField(): THREE.Mesh {\n    return new THREE.Mesh(\n      new THREE.SphereGeometry(90, 64, 64).rotateX(THREE.Math.degToRad(90)),\n      new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load(STAR_IMAGE),\n        side: THREE.BackSide,\n      })\n    );\n  }\n\n  private drag(deltaX: number, deltaY: number): void {\n    let radPerPixel = Math.PI / 450,\n      deltaPhi = radPerPixel * deltaX,\n      deltaTheta = radPerPixel * deltaY,\n      pos = this.camera.position.sub(this.center),\n      radius = pos.length(),\n      theta = Math.acos(pos.z / radius),\n      phi = Math.atan2(pos.y, pos.x);\n\n    // Subtract deltaTheta and deltaPhi\n    theta = Math.min(Math.max(theta - deltaTheta, 0), Math.PI);\n    phi -= deltaPhi;\n\n    // Turn back into Cartesian coordinates\n    pos.x = radius * Math.sin(theta) * Math.cos(phi);\n    pos.y = radius * Math.sin(theta) * Math.sin(phi);\n    pos.z = radius * Math.cos(theta);\n\n    this.camera.position.add(this.center);\n    this.camera.lookAt(this.center);\n  }\n\n  private zoomIn(): void {\n    if (this.camera.position.length() > MAX_ZOOM) {\n      this.camera.position\n        .sub(this.center)\n        .multiplyScalar(0.9)\n        .add(this.center);\n    }\n  }\n\n  private zoomOut(): void {\n    if (this.camera.position.length() < MIN_ZOOM) {\n      this.camera.position\n        .sub(this.center)\n        .multiplyScalar(1.1)\n        .add(this.center);\n    }\n  }\n\n  public render(): void {\n    const { renderer, globe, scene, camera, clouds, container } = this;\n    const renderFuncs: RenderFunc[] = [];\n\n    renderFuncs.push(\n      (delta: number): void => {\n        globe.rotateZ((1 / 32) * delta);\n      }\n    );\n\n    renderFuncs.push(\n      (delta: number): void => {\n        clouds.rotateZ((1 / 24) * delta);\n      }\n    );\n\n    window.addEventListener('resize', function onWindowResize(): void {\n      camera.aspect = container.clientWidth / container.clientHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(container.clientWidth, container.clientHeight);\n    });\n\n    renderFuncs.push(\n      (): void => {\n        renderer.render(scene, camera);\n      }\n    );\n\n    let lastTimeMsec: number | null = null;\n    requestAnimationFrame(function animate(nowMsec): void {\n      // measure time\n      lastTimeMsec = lastTimeMsec || nowMsec - 1000 / 60;\n      const deltaMsec = Math.min(200, nowMsec - lastTimeMsec);\n      lastTimeMsec = nowMsec;\n      // call each update\n      renderFuncs.forEach(\n        (renderFunc: RenderFunc): void => {\n          renderFunc(deltaMsec / 1000, nowMsec / 1000);\n        }\n      );\n\n      // keep looping\n      requestAnimationFrame(animate);\n    });\n  }\n}\n\nexport default Globe;\n","import React, { useEffect, useRef, ReactElement, RefObject } from 'react';\nimport style from './app.module.css';\nimport Globe from './components/globe/Globe';\n\nfunction useGlobe(): RefObject<HTMLElement> {\n  const threeContainer = useRef<HTMLElement>(null);\n\n  useEffect(\n    (): void => {\n      if (threeContainer.current) {\n        const globe = new Globe(threeContainer.current);\n        globe.render();\n      }\n    }\n  );\n\n  return threeContainer;\n}\n\nfunction App(): ReactElement {\n  const threeContainer = useGlobe();\n\n  return (\n    <div className={style.app}>\n      <header className={style.appHeader}>CLEAN PLANET</header>\n      <main className={style.threeContainer} ref={threeContainer} />\n      <footer>© Anton Chernov 2019</footer>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__32yr0\",\"appHeader\":\"app_appHeader__3VOiX\",\"threeContainer\":\"app_threeContainer__2hjE3\"};"],"sourceRoot":""}